对于一个专注的开发人员, 可以先花半年至一年左右, 深入研究一门语言特性, 常用框架的搭建和使用. 之后要像读新闻一样, 随时关注语言和框架的变化趋势,社区的动态等. 熟悉语言和框架后,再研究软件设计, 最后是软件架构. 看完以下罗列的概念, 可能会对整个软件开发行业有个整体认识和概览.

Tag:[面试][技术][理论理解]
1. [理论理解] 什么是软件架构: 即使维基百科上也没有确切的定义(但肯定比我说的准，也更复杂 https://en.wikipedia.org/wiki/Software_architecture)。但一般工程师沟通起来说道架构，可以指
	- 整个系统逻辑模块的分布和关系; 部署模型; 物理机器模型
	- 对于大型系统（多见于企业级开发，就是那些企业内部用的，或是卖给大企业的产品，独立部署和运行的程序都有五+个，他们之间相互通信，或又与外界通讯。 企业级开发在写真正业务逻辑前，还要有服务发现,配置管理，消息队列，事件转发，日志等各个方面的基础服务系统要做。而这些基础服务的开发很花时间，这也正是SpringBoot这样的框架要解决的问题）而言，架构的好坏，直接影响到的性能，可靠性，可追踪/监控，可扩展(正是有了上述的基础服务，这些才能更好的体现)等等。 但对于互联网企业，创业公司而言，通常需要的是快，只要占领市场，有用户，产品就算成功了。系统有问题可以再招人，哪怕加班重做，一般架构从简。
	- 最基本的架构可以指BS/CS, 但这种分发特别笼统，因为即使Browser/Server，其后端也可以划分出很多Server系统相互通讯。
	- 常见的架构: 微服务架构，分层架构（表现层，业务层，持久层...; MVVM; MVC; 还有各式各样的分法），事件驱动架构(不太理解...)
	- 讲架构有一本不错的书，《领域驱动设计》 但不是很容易理解，我也只看了个开头。 另外有一套简单的书，《The Architecture of Open Source Applications》现出了四卷，看着很厉害的样子，但里面内容挺好理解的，而且可以挑着看。 在线阅读地址： http://www.aosabook.org/en/index.html
	- 另附一个曾经以为很牛逼的架构贴：.Net项目分层与文件夹结构大全 http://www.cnblogs.com/legendxian/archive/2012/06/18/2553111.html 现在觉得只是分了一堆文件夹，好坏无从谈起。 但学习分层架构可能有点帮助。
	- 如何看别人的架构:试想自己做的话，要如何架构,然后比较别人的架构和分析。最关键的是，如果以后自己要架构软件的时候，要能想到哪个架构合适（其实关键是要说服那些challenage你的人...）！ 这点我也做不到，只是说说自己的感想。
	
2. [理论理解] 软件设计: 有些时候, 软件设计的工作会与架构重合, 但还是有着自身的特点. 跟所有的设计工作一样, 软件的设计也不是100%的对错之分, 只是在特定的情况下, 一种设计会有一定的优势(当然同时也有弊端). 一般设计的工作有下面几点:
	- 模块设计: 模块可大可小, 主要考虑的是复用性(体现在写代码时,不需重写), 一般可以从功能行来分(要求熟悉代码编写), 业务角度分(要求充分了解业务). 举例: 中型模块: 最近看的一个DotNetty项目, 把配置文件管理单独做成一个项目, 不同的demo都引用这个配置管理模块读写配置. 小型模块: 比如一个项目里的网络模块(功能性角度分), 用户模块(业务角度分). 大型模块(这属于架构范畴了): 比如sbX由四个部分组成, Core, Framework, MediaManager, FloorManager, 他们分别独立build, 独立代码管理, 安装部署时却有依赖,并放到一个IGT/sbx目录下. 当时sbX这样拆分, 一个原因是不同team的人可以专注自己的部分(比如我只管MediaManager); 原来的构建时间特别长(半天左右), 拆开后方便构建和测试; 另外产品角度, 也可以拆开来卖. 
	- [面试] 设计模式: 除了模块的设计, 经常在开发时采用一定的设计模式, 这可以让软件更好地应对变更(因为软件开发中唯一不变的就是变动...这点非常重要). 设计模式其实都很好学, 而且是面试必考的一个点! 但在使用某个模式之前, 要避免过度设计--不了解市场和用户的情况下, 预想了很多可能的变动, 然后使用模式来应对, 结果都是瞎想(当然也有人就是为了练手, 就在production系统里用)... 这样即耽误时间, 又影响后来维护的人理解代码. 设计模式的书一般要常备案边的: <大话设计模式>, <Head First Design Pattern>, 等等. 比较重要的一点是, 要完全熟悉一个模式的使用!!!场景!!!. 而且有类似场景时候,能判断出相似的几个模式哪个更合适(这就要求了解各个模式的区别(但因为这是设计,这不会有标准对与错), 比如Proxy, Adaptor, Facade). 讲模式的帖子特别多, 而且会分分类, 比如: http://www.cnblogs.com/geek6/p/3951677.html. 时间久了, 写代码时不知不觉就用了模式, 达到手中无剑,心中有剑的境界.....
	- [面试] OOSAD: 面向对象的分析与设计. 一般大学的计科, 软工等专业都会开这一门课. 主要讲什么是OO, 哪些概念/特点(多态, 继承, 封装, 重载... 可以搜"java 面向对象 面试" 特别多). 实用的经验是: 一般小模块, 我会在纸上画画类图. 大模块, 习惯用EA(Enterprise Architecture), 这个除了画图,能生成代码等各种功能. 而实际开发时, 特别多的细节都发生在这里: 哪些代码应该拆成一个单独的函数(建议不要怕函数多, 尽量保持代码!语义可读!和功能复用, 现在一些代码分析工具如SonarQube会建议一个函数不超过n行); 访问权限是否公开(建议:让被调用者了解最少, 即调用者在"点"的时候, 弹出来可选的信息!够用而且最少!. 不然一堆属性和方法都公开,别人必须亲自来询问, 且极有可能调错); 函数里用的值是做成参数,还是在类里放个成员变量(建议尽量以参数形式传递, 成员变量代表一个类的组成部分, 过多会导致对象复杂不好理解); 什么时候拆成两个类(建议:不一定在设计时候全做好, 当一个类越来越大时候, 一定要考虑拆分); 类之间的关系(比如谁负责对象创建谁, 是保存对象引用 还是使用时候传入, 什么时候更新对象引用. 甚至A应不应该知道B 等等..... 这个在复杂模块时, 最常出现问题, 也是最需要重构的. 建议:无, 多写多实践吧. 具体问题具体考虑...... 可以参考has A 还是Is A); 这些细节一般不影响软件功能, 但高质量的代码, 就是这些细节决定的. 这也是除了死记硬背语言API, 框架API之外, 最有发挥余地的一点(当然对API熟悉, 会对设计有很大帮助).
	- 如何看别人的设计:1,试想自己如何设计 2,使用别人设计和自己的设计的优劣(开发时效率,维护时阅读是否易懂....)	
	- [理论理解]设计原则: 设计的模式可能千变万化,但最终的目的是一致的. 所以评判代码质量,可以看是否符合设计原则. 最重要的一个:高内聚,低耦合.不同的阶段总会对这句话有新的理解,而且讲得溜的话,会让人觉得内行~ 另外, 设计模式里会有六大原则: 开闭原则,单一职责,迪米特法则(最少知道原则)...... 这也是可能面试的一点.
	- 最后, 关于架构和设计. 目前大多数观点认为, 好的架构和设计, 不是一次性设计好的. 而是不断!重构!, 演化出来的: Evolve the system, instead of building the system. 而重构也是最能增加设计能力的! (关于重构的书我还没看过. 可以在知乎,Quora上搜搜看.)

3. [技术] 新项目的开发流程:
	- 评估项目规模
	- 选或设计架构
	- 软件设计
	- 选框架(不同框架下的开发模型与流程), 搭环境, 分模块(或API)
	- 写代码实现	
4. [面试] [技术] 敏捷(项目流程):　git, jira, Jenkins, Code Review 与架构设计的保证. 精益理念.
5. [技术] [面试] B/S结构:
	前端，
	后端，
6. [技术] C/S结构:
	企业级软件开发
7. [技能] 软件维护.如何熟悉,上手已有项目. 如何更好的调试(调试Debug经验). 
8. [技能] 软件设计师的职业发展(热点,先专再博)
9. [技能] 技术圈子与社区, 程序员杂志
9. [面试] 算法: www.leetcode.com
11. [面试] 简历，项目与职责描述，项目特出贡献, 自己优秀之处(项目产品改进 流程改进 什么让自己晋升)，处理问题(weimin为例)和解决问题的能力
12. [面试] [技术] 技术细节，流行框架和环境搭建,如sprint boot
13. [面试] [技术] 数据库. 类型, 管理, SQL增删改查, sp...
14. [技能] [面试] 项目管理. 组员与角色

