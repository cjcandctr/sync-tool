app location: /usr/share/applications

Tag:[面试][技术][理论理解]
1. [理论理解] 什么是软件架构: 即使维基百科上也没有确切的定义(但肯定比我说的准，也更复杂 https://en.wikipedia.org/wiki/Software_architecture)。但一般工程师沟通起来说道架构，可以指
	- 整个系统逻辑模块的分布和关系; 部署模型; 物理机器模型
	- 对于大型系统（多见于企业级开发，就是那些企业内部用的，或是卖给大企业的产品，独立部署和运行的程序都有五+个，他们之间相互通信，或又与外界通讯。 企业级开发在写真正业务逻辑前，还要有服务发现,配置管理，消息队列，事件转发，日志等各个方面的基础服务系统要做。而这些基础服务的开发很花时间，这也正是SpringBoot这样的框架要解决的问题）而言，架构的好坏，直接影响到的性能，可靠性，可追踪/监控，可扩展(正是有了上述的基础服务，这些才能更好的体现)等等。 但对于互联网企业，创业公司而言，通常需要的是快，只要占领市场，有用户，产品就算成功了。系统有问题可以再招人，哪怕加班重做，一般架构从简。
	- 最基本的架构可以指BS/CS, 但这种分发特别笼统，因为即使Browser/Server，其后端也可以划分出很多Server系统相互通讯。
	- 常见的架构: 微服务架构，分层架构（表现层，业务层，持久层...; MVVM; MVC; 还有各式各样的分法），事件驱动架构(不太理解...)
	- 讲架构有一本不错的书，《领域驱动设计》 但不是很容易理解，我也只看了个开头。 另外有一套简单的书，《The Architecture of Open Source Applications》现出了四卷，看着很厉害的样子，但里面内容挺好理解的，而且可以挑着看。 在线阅读地址： http://www.aosabook.org/en/index.html
	- 另附一个曾经以为很牛逼的架构贴：.Net项目分层与文件夹结构大全 http://www.cnblogs.com/legendxian/archive/2012/06/18/2553111.html 现在觉得只是分了一堆文件夹，好坏无从谈起。 但学习分层架构可能有点帮助。
	- 如何看别人的架构:试想自己做的话，要如何架构,然后比较别人的架构和分析。最关键的是，如果以后自己要架构软件的时候，要能想到哪个架构合适（其实关键是要说服那些challenage你的人...）！ 这点我也做不到，只是说说自己的感想。
	
2. [理论理解] 什么是软件设计
	- 模块　模式[面试]　分拆函数　参数设计　属性与字段 文件组织
	- 如何看别人的设计:1,试想自己如何设计 2,使用别人设计和自己的设计的优劣(开发时效率,维护时阅读是否易懂....)
	- [面试] OOSAD
3. [技术] 开发流程:
	- 评估项目规模
	- 选或设计架构
	- 软件设计
	- 选框架(不同框架下的开发模型与流程), 搭环境, 分模块(或API)
	- 写代码实现
4. [面试] [技术] 敏捷(项目流程):　git, jira, Jenkins
5. [技术] [面试] B/S结构:
	前端，
	后端，
6. [技术] C/S结构:
	企业级软件开发
7. 如何熟悉,上手已有项目
8. [技能] 软件设计师的职业发展(热点,先专再博)
9. [技能] 技术圈子与社区, 程序员杂志
9. [面试] 算法: www.leetcode.com
11. [面试] 简历，项目与职责描述，项目特出贡献, 自己优秀之处(项目产品改进 流程改进 什么让自己晋升)，处理问题(weimin为例)和解决问题的能力
12. [面试] [技术] 技术细节，流行框架和环境搭建,如sprint boot
13. [面试] [技术] 数据库. 类型, 管理, SQL增删改查, sp...
14. [技能] [面试] 项目管理. 组员与角色

面向对象


小涛经验
源码